function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component } from "react";
import { oneOf, string, func, bool, number } from "prop-types";
import Alert from "./alert";
import { ENTER_TIMEOUT, EXIT_TIMEOUT } from "./container";

var AlertTimer = /*#__PURE__*/function (_Component) {
  _inherits(AlertTimer, _Component);

  var _super = _createSuper(AlertTimer);

  function AlertTimer(props) {
    _classCallCheck(this, AlertTimer);

    return _super.call(this, props);
  }

  _createClass(AlertTimer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setupTimer(this.props.timeout, this.props.onDismiss);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.timeout != prevProps.timeout || this.props.onDismiss != prevProps.onDismiss) {
        this.setupTimer(this.props.timeout, this.props.onDismiss);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // need to clean up after ourselves
      this.setupTimer();
    }
  }, {
    key: "setupTimer",
    value: function setupTimer(timeout, onDismiss) {
      if (!timeout || !onDismiss) {
        // clear any timer we currently have
        clearTimeout(this.timer);
        this.timer = null;
        this.timerTimeout = null;
      } else {
        if (this.timer && this.timerTimeout != timeout) {
          // the timeout value has changed, setup a new timer
          clearTimeout(this.timer);
          this.timer = null;
        } // add new timer if we don't already have one


        if (!this.timer) {
          this.timer = setTimeout(this.dismissAlert.bind(this, onDismiss), timeout + ENTER_TIMEOUT + EXIT_TIMEOUT);
          this.timerTimeout = timeout;
        }
      }
    }
  }, {
    key: "dismissAlert",
    value: function dismissAlert(onDismiss) {
      // clear the timer if it hasn't fired yet
      clearTimeout(this.timer); // we don't need to keep track of any timers for this alert anymore

      this.timer = null;
      this.timerTimeout = null; // actually dismiss the alert

      onDismiss();
    }
  }, {
    key: "render",
    value: function render() {
      var onDismiss = this.props.onDismiss ? this.dismissAlert.bind(this, this.props.onDismiss) : null;
      return /*#__PURE__*/React.createElement(Alert, _extends({}, this.props, {
        onDismiss: onDismiss
      }));
    }
  }]);

  return AlertTimer;
}(Component);

export { AlertTimer as default };
export var PropTypes = {
  type: oneOf(["info", "success", "warning", "danger"]),
  headline: string,
  onDismiss: func,
  dismissTitle: string,
  showIcon: bool,
  timeout: number
};
AlertTimer.propTypes = PropTypes;