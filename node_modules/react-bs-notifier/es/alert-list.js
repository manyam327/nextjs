function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import { TransitionGroup } from "react-transition-group";
import { any, arrayOf, func, node, object, oneOfType, shape, string } from "prop-types";
import Container, { PropTypes as ContainerPropTypes, useStyles } from "./container";
import Alert, { PropTypes as AlertPropTypes } from "./alert-timer";
import AlertTransition from "./alert-transition";

var AlertList = function AlertList(_ref) {
  var position = _ref.position,
      alerts = _ref.alerts,
      onDismiss = _ref.onDismiss,
      props = _objectWithoutProperties(_ref, ["position", "alerts", "onDismiss"]);

  var classes = useStyles();
  return /*#__PURE__*/React.createElement(Container, {
    position: position,
    className: classes.container
  }, /*#__PURE__*/React.createElement(TransitionGroup, null, alerts.map(function (item) {
    var dismiss = onDismiss ? function () {
      return onDismiss(item);
    } : null;

    var message = item.message,
        alertProps = _objectWithoutProperties(item, ["message"]);

    return /*#__PURE__*/React.createElement(AlertTransition, {
      key: item.id
    }, /*#__PURE__*/React.createElement(Alert, _extends({}, props, alertProps, {
      onDismiss: dismiss
    }), message));
  })));
};

var timeout = AlertPropTypes.timeout,
    type = AlertPropTypes.type,
    headline = AlertPropTypes.headline;
AlertList.propTypes = _objectSpread(_objectSpread({}, ContainerPropTypes), {}, {
  alerts: arrayOf(shape({
    id: any.isRequired,
    type: type,
    headline: headline,
    message: oneOfType([string, node, object]).isRequired
  })).isRequired,
  onDismiss: func,
  timeout: timeout
});
export default AlertList;