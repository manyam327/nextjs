function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import { createUseStyles } from "react-jss";
import { bootstrap } from "toetag";
import Icon from "./icon";
import transitionStyles from "../transition-styles";

var Alert = function Alert(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? "info" : _ref$type,
      children = _ref.children,
      headline = _ref.headline,
      onDismiss = _ref.onDismiss,
      _ref$dismissTitle = _ref.dismissTitle,
      dismissTitle = _ref$dismissTitle === void 0 ? "Dismiss" : _ref$dismissTitle,
      _ref$showIcon = _ref.showIcon,
      showIcon = _ref$showIcon === void 0 ? true : _ref$showIcon,
      classOverrides = _ref.classes;
  var classes = useStyles();
  classes = _objectSpread(_objectSpread({}, classes), classOverrides);
  var isDismissable = !!onDismiss;
  var css = "".concat(isDismissable ? classes.dismissable : "", " ").concat(classes[type], " ").concat(classes.alert);
  var dismiss = isDismissable ? /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: classes.close,
    title: dismissTitle,
    onClick: onDismiss
  }, "\xD7") : null;
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: css
  }, dismiss, showIcon ? /*#__PURE__*/React.createElement(Icon, {
    className: classes.icon,
    type: type
  }) : null, /*#__PURE__*/React.createElement("div", {
    className: classes.msgContainer
  }, headline ? /*#__PURE__*/React.createElement("h4", {
    className: classes.headline
  }, headline) : null, /*#__PURE__*/React.createElement("div", {
    className: classes.body
  }, children))));
};

var useStyles = createUseStyles(_objectSpread(_objectSpread({}, transitionStyles), {}, {
  alert: {
    composes: "alert",
    marginBottom: bootstrap.paddingBaseVertical,
    display: "inline-block",
    textAlign: "left"
  },
  info: {
    composes: "alert-info"
  },
  success: {
    composes: "alert-success"
  },
  warning: {
    composes: "alert-warning"
  },
  danger: {
    composes: "alert-danger"
  },
  dismissable: {
    composes: "alert-dismissable"
  },
  close: {
    composes: "close"
  },
  msgContainer: {
    display: "inline-block"
  },
  icon: {
    verticalAlign: "top",
    fontSize: bootstrap.fontSizeH4,
    paddingRight: bootstrap.paddingLargeHorizontal,
    opacity: 0.2
  },
  headline: {
    margin: 0,
    marginBottom: bootstrap.paddingBaseVertical
  },
  body: {
    maxWidth: "40em"
  }
}));
export default Alert;